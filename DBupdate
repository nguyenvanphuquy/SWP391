-- Roles
CREATE TABLE Roles (
    RoleID INT PRIMARY KEY IDENTITY,
    RoleName NVARCHAR(50) NOT NULL
);

-- Users
CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY,
    FullName NVARCHAR(100),
    Gender NVARCHAR(10),
    DateOfBirth DATE,
    Phone NVARCHAR(20),
    Email NVARCHAR(100),
    Address NVARCHAR(255),
    RoleID INT,
    FOREIGN KEY (RoleID) REFERENCES Roles(RoleID)
);

-- Accounts
CREATE TABLE Accounts (
    AccountID INT PRIMARY KEY IDENTITY,
    UserID INT UNIQUE,
    Username NVARCHAR(50) UNIQUE,
    PasswordHash NVARCHAR(100),
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
);

-- Treatment Services
CREATE TABLE Treatment_Services (
    ServiceID INT PRIMARY KEY IDENTITY,
    Name NVARCHAR(100),
    Description NVARCHAR(MAX),
    Fee DECIMAL(10, 2)
);

-- Booking
CREATE TABLE Booking (
    BookingID INT PRIMARY KEY IDENTITY,
    CustomerID INT,
    DoctorID INT,
    ServiceID INT,
    BookingDate DATETIME,
    Status NVARCHAR(50),
    FOREIGN KEY (CustomerID) REFERENCES Users(UserID),
    FOREIGN KEY (DoctorID) REFERENCES Users(UserID),
    FOREIGN KEY (ServiceID) REFERENCES Treatment_Services(ServiceID)
);

-- Treatment Schedules
CREATE TABLE Treatment_Schedules (
    ScheduleID INT PRIMARY KEY IDENTITY,
    BookingID INT,
    StartDate DATETIME,
    EndDate DATETIME,
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID)
);

-- Treatment Progress
CREATE TABLE Treatment_Progress (
    ProgressID INT PRIMARY KEY IDENTITY,
    ScheduleID INT,
    Notes NVARCHAR(MAX),
    ProgressDate DATETIME,
    FOREIGN KEY (ScheduleID) REFERENCES Treatment_Schedules(ScheduleID)
);

-- Notification
CREATE TABLE Notification (
    NotificationID INT PRIMARY KEY IDENTITY,
    ProgressID INT,
    Message NVARCHAR(MAX),
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ProgressID) REFERENCES Treatment_Progress(ProgressID)
);

-- WorkSchedule
CREATE TABLE WorkSchedule (
    ScheduleID INT PRIMARY KEY IDENTITY,
    DoctorID INT,
    DayOfWeek NVARCHAR(20),
    StartTime TIME,
    EndTime TIME,
    FOREIGN KEY (DoctorID) REFERENCES Users(UserID)
);

-- Examination
CREATE TABLE Examination (
    ExaminationID INT PRIMARY KEY IDENTITY,
    StaffID INT,
    CustomerID INT,
    Date DATETIME,
    Notes NVARCHAR(MAX),
    FOREIGN KEY (StaffID) REFERENCES Users(UserID),
    FOREIGN KEY (CustomerID) REFERENCES Users(UserID)
);

-- Medical Results
CREATE TABLE Medical_Results (
    ResultID INT PRIMARY KEY IDENTITY,
    ExaminationID INT,
    DoctorID INT,
    Diagnosis NVARCHAR(MAX),
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ExaminationID) REFERENCES Examination(ExaminationID),
    FOREIGN KEY (DoctorID) REFERENCES Users(UserID)
);

-- Prescription
CREATE TABLE Prescription (
    PrescriptionID INT PRIMARY KEY IDENTITY,
    ResultID INT,
    Medicine NVARCHAR(255),
    Dosage NVARCHAR(100),
    Duration NVARCHAR(100),
    FOREIGN KEY (ResultID) REFERENCES Medical_Results(ResultID)
);

-- Invoice
CREATE TABLE Invoice (
    InvoiceID INT PRIMARY KEY IDENTITY,
    CustomerID INT,
    BookingID INT,
    TotalAmount DECIMAL(10, 2),
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CustomerID) REFERENCES Users(UserID),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID)
);

-- Payment
CREATE TABLE Payment (
    PaymentID INT PRIMARY KEY IDENTITY,
    InvoiceID INT,
    Method NVARCHAR(50),
    PaidAt DATETIME,
    FOREIGN KEY (InvoiceID) REFERENCES Invoice(InvoiceID)
);

-- Treatment Record
CREATE TABLE Treatment_Record (
    RecordID INT PRIMARY KEY IDENTITY,
    CustomerID INT,
    ResultID INT,
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CustomerID) REFERENCES Users(UserID),
    FOREIGN KEY (ResultID) REFERENCES Medical_Results(ResultID)
);

-- Feedback and Ratings
CREATE TABLE Feedback_Ratings (
    FeedbackID INT PRIMARY KEY IDENTITY,
    CustomerID INT,
    DoctorID INT,
    ServiceID INT,
    Rating INT,
    Comment NVARCHAR(MAX),
    CreatedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (CustomerID) REFERENCES Users(UserID),
    FOREIGN KEY (DoctorID) REFERENCES Users(UserID),
    FOREIGN KEY (ServiceID) REFERENCES Treatment_Services(ServiceID)
);

-- Blog Posts (optional)
CREATE TABLE Blog_Posts (
    PostID INT PRIMARY KEY IDENTITY,
    ManagerID INT,
    Title NVARCHAR(200),
    Content NVARCHAR(MAX),
    PublishedAt DATETIME DEFAULT GETDATE(),
    FOREIGN KEY (ManagerID) REFERENCES Users(UserID)
);

CREATE TABLE Doctor (
    doctor_id INT FOREIGN KEY REFERENCES Users(UserID),
    FullName NVARCHAR(100) NOT NULL,
    Gender NVARCHAR(10),
    DateOfBirth DATE,
    PhoneNumber NVARCHAR(15),
    Email NVARCHAR(100) UNIQUE,
    Specialization NVARCHAR(100),
    Degree NVARCHAR(100),
    ExperienceYears INT,
    Username NVARCHAR(50) UNIQUE NOT NULL,
    Password NVARCHAR(100) NOT NULL,
    ProfileImage NVARCHAR(255), -- Đường dẫn hoặc tên file ảnh đại diện
    Status BIT DEFAULT 1
);
